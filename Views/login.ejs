<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Login</title>
  <link rel="stylesheet" href="login.css" />
  <link
    rel="stylesheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css"
    integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A=="
    crossorigin="anonymous"
    referrerpolicy="no-referrer"
  />
</head>
<body>
  <div class="wrapper">
    <form id="loginForm">
      <h1>Login</h1>
      <div class="inputbox">
        <input id="usernameInput" placeholder="Username" type="text" required />
        <i class="fa-solid fa-user"></i>
      </div>

      <div class="inputbox">
        <input id="passwordInput" placeholder="Password" type="password" required />
        <i class="fa-solid fa-lock"></i>
      </div>

      <div class="remember-forgot">
        <label><input type="checkbox" />Remember me</label>
        <a href="#">Forgot password?</a>
      </div>

      <button type="submit">Login</button>

      <div class="register">
        <p>Don't have an account? <a href="signup">Register Now</a></p>
      </div>
    </form>
  </div>

  <script>
    document.getElementById('loginForm').addEventListener('submit', function(event) {
      event.preventDefault(); // Prevent the form from submitting
  
      // Get the username and password values
      const username = document.getElementById('usernameInput').value;
      const password = document.getElementById('passwordInput').value;
  
      // Check if username or password is empty
      if (!username || !password) {
        alert('Username or password cannot be empty.');
        return; // Exit the function if fields are empty
      }
  
      // If fields are not empty, proceed with the POST request
      fetch('/authenticate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ username, password})
      })
      .then(response => {
          console.log('Response:', response); // Log the response for debugging
          if (response.ok) {
              // Handle successful response here (e.g., redirect to another page)
              return response.json(); // Parse response body as JSON
          } else if (response.status === 401) {
              // Handle unauthorized response (incorrect credentials)
              alert('Login failed. Please check your credentials.');
          } else {
              // Handle other types of errors
              alert('An error occurred while processing your request.'); // Display generic error message
          }
      })
      .then(data => {
          console.log('Data:', data); // Log parsed JSON data
          if (data) {
              localStorage.setItem('isAuthenticated', 'true');
              localStorage.setItem('username', data.username);
              localStorage.setItem('avatarurl', data.avatarurl);
              alert('Login successful!');
              window.location.href = '/'; // Redirect to the homepage
          }
      });
    });
  </script>
</body>
</html>
